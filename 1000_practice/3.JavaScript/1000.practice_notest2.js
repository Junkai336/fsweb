// 41_function

/* 

사용자 정의 함수
    - 매개변수 (매개값)
    - 리턴(return) : 값을 되돌려 주거나 / 함수 종료 기능
    - 스코프(scope, 영역) - 변수, 함수

문(statement)
    - 표현식(expression) : 결과값이 있는 문장
    - 함수문, 제어문(if, for..) : 결과값이 없는 문장


함수 정의

    선언적 함수 (호이스팅) (선언 전/후 호출) (이름이 있는 함수) (페이지가 function을 보면 최우선순위로 메모리에 넣음)
    (호이스팅: 자바스크립트 해석기가 변수, 함수의 메모리 공간을 선언 전에 미리 할당)
        function 함수 ([para][,매개변수][,...]) {
            코드;
            return [표현식];
                ex) return a * b;
        }

    익명 함수 (우선순위 높음, 화살표 함수로 변경 가능) (선언 후 호출) (이름이 없는 함수) (함수 먼저 정의하고 호출해야 함) (익명 함수의 경우 함수 정의 전에 함수 호출문이 있어도 적용x)
        var 함수명 = function () {
            코드;
        }

    화살표 함수
        var 함수명 = () => {
            코드;
        }

        매개변수 1개일 경우 () 생략 가능 (매개변수가 없으면 () 생략 불가능)
            var 함수명 = 매개변수 => {
                코드;
            }

        명령문이 1개일 경우 {} 생략 가능
            var 함수명 = () => 1줄코드;
            var 함수명 = 매개변수 => 1줄코드;

함수 호출

    함수([매개값]);
    참조변수();

    재귀호출
        function 함수(매개변수, ...) {
            함수();
            return 값; <- 자기 자신을 계속 부르는 걸 빠져나옴
        }



innerHTML : <br>로 줄바꿈 가능
innerText : <br> 없이 줄바꿈 가능 (textarea, whitespace-pre 와 비슷)

return; : 함수 종료, 값을 돌려주지않음.

(return에 대해 추가적인 학습 필요)



window.addEventListener('DOMContentLoaded', loadFn);

function loadFn() {
    돔을 읽기전에 먼저 실행할 코드;
}


*/

////////////////////////////////////////////////////////////////////////////////

// 43_return, 43-1_이미지갤러리, 44_재귀함수호출

/* 
    return : 함수 호출문에 결과값 반환 후 함수 종료
        return 데이터(값);

    재귀호출(자기호출) 함수 -> 무한 루프
        function 함수() {
            함수();
        }
    
    즉시호출 함수 -> 정의되자마자 즉시 실행되는 함수, 한번의 실행 이후 사라짐
        (function 함수() {
            코드;
        })();

    <button onclick="함수()">이전</button>
    <button onclick="함수()">다음</button>

*/

////////////////////////////////////////////////////////////////////////////////

// 45_scope

/* 

    스코프(scope) : 변수 or 함수의 유효 범위

        전역 변수/함수
            - 모든 영역에서 사용할 수 있는 변수/함수

        지역 변수/함수
            - 스코프 영역에서 선언한 변수/함수
            - 스코프 영역에서만 사용할 수 있다.
            - 지역 변수는 함수 밖에서 사용할 수 없다.

        
        
        - 함수 내에서 전역 변수 값 변경 가능
        - 지역 변수는 함수 밖에서 변경 불가능
        - 전역 변수와 같은 이름을 지역 변수에서 재선언하면 전역 변수와 관계 없는 별개의 변수로 사용된다.
        - 함수 내에서 선언 없이 할당한 변수는 전역 변수와 같이 사용된다.
        - 제어문에서 선언한 변수는 전역 변수와 같이 사용된다.
        
        var
            - 함수 영역 변수 -> 함수(){}
            - 사용 후 아래에서 선언할 수 있다. (호이스팅 가능)
            - 재선언 가능 (먼저 선언한 변수는 무시됨)
        
        let
            - 블록 영역 변수 -> 함수(){} for(){}
            - 변하는 값 저장
            - 선언 후 사용 (호이스팅 불가)
            - 재선언 불가

        const
            - 블록 영역 변수 -> 함수(){} for(){}
            - 고정 값(상수) 저장
            - 선언과 동시에 할당 (호이스팅 불가)
            - 재선언, 재할당 불가
        
        
        var : 함수 안/밖, 호이스팅(o), 재선언(o), 재할당(o), 변수/상수 값
        let : 블록 안/밖, 호이스팅(x), 재선언(x), 재할당(o), 변수 값
        const : 블록 안/밖, 호이스팅(x), 재선언(x), 재할당(x), 상수 값

        전역변수에서 선언한 변수, 지역변수1에서 선언한 변수, 지역변수2에서 선언한 변수 서로 별개임.

        블록이란? - 중괄호 {}

        undefined : 변수에 값이 등록되기 전 기본 값, 값 등록 안되어있다,
                    변수 선언 후 할당값이 없을 때
*/

////////////////////////////////////////////////////////////////////////////////

// 51_object(객체)

/* 
        자바스크립트는 객체 기반 언어
        
        객체
            - 객체는 속성과 메서드(function을 가진 속성)을 가지고 있다.

        const object = {
            속성: 값,
            속성: 값,
            속성: 값,
            ...
        }

        


*/

////////////////////////////////////////////////////////////////////////////////

// 52_Date

////////////////////////////////////////////////////////////////////////////////

// 53_Math
