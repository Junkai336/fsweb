/*  00  */

/* 

Cascading Style Sheet
- 태그를 디자인
- 우선순위: 폭포식. 위에서 아래
- 위에쓴건 아래에도 적용되는 듯?
- 아래에 쓴건 우선순위가 높다?
 */


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
/*  01 선언방식 */

/* <

    형식 
    - 선택자 {
        속성: 값;
        속성: 값;
    }
    - 선택자 {속성: 값; 속성: 값;}

  */

/* 
인라인 CSS
- HTML 태그에 직접 기록
- <p style="속성:값;"> style 속성에 CSS의 속성 값 기록 </p>

내부 CSS
- <style> HTML파일의 style 사이에 기록 </style>

외부 CSS
- title밑 /head위
- <link> 태그로 css파일 연결
<link rel="stylesheet" href="../../70_project/css/main.css">


link와 style은 head의 자식

인라인 > 내부 > 외부 우선순위 인듯?
 */

/* 
     W3C: HTML CSS 섞어쓰지 말자 

    CSS속성: Property
    HTML속성: Attribute
  -->  */

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
/*  02 id class 요소 */

/* 
    우선순위
        - id > class > 요소(element)
        -  #     .     p,a,img..

        - !important > 인라인css > id,class,요소
    */

/* 
        id는 똑같은 값 X
        class는 똑같은 값 O

        id 속성 값을 하나 이상 지정 X
        class 속성 값을 하나 이상 지정 O = class="값1 값2 값3"
    */

#p {
  color: blue;
}

.p {
  color: blue;
}

p {
  color: blue;
}


  {
  border,
  outline solid(실선),
  dotted(점선),
  dashed(대시선);
}

/* 
        CSS 선택자(Selector)
        1.요소 선택자: 전체, 그룹, id, class, 요소
          - HTML 태그 이름으로 지정  
        2.복합 : 부모 자식 형제
        3.의사 클래스 : :link, :visited, :hover, :detective
          (Pseudo, 슈도, 가상, 가짜, 유사)
        4.의사 요소: ::before, ::after
        5.속성: .div
        */

/* 
       <p style="color:black">aaa</p> 
       */

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
/* <02-1,1-1 그룹,범용 */


/* 그룹 선택자 : 속성 값이 같은 경우 */
html,
body,
h1,
h2 {
  color: red;
}

/* 범용 선택자: Universal / 전체 선택 */
* {
  margin: 0;
  padding: 0;
}

/* 범용 선택자를 쓰면 시스템 자원 낭비 현상(시스템 리소스 많이 차지)가 있음 */
html {
  margin: 0;
  padding: 0;
}

body {
  margin: 0;
  padding: 0;
}

html,
body,
ul,
p {
  margin: 0;
  padding: 0;
}

/* 패딩유무는 border를 쓰면 알 수 있다. */

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-2, 02-3 자손 자식 형제 */

/* 
  복합선택자: 선택자 2개 사용
    1.후손(하위, 자손) 선택자: 공백
      조상 자손 O
      부모 자식 O

    2.자식             선택자: >
      조상 > 자손 X
      부모 > 자식 O
*/

/* 
  형제 선택자
    1. 일반형제선택자: ~
      - Tilde, 틸더
      - 선택자1 ~ 선택자2
      -  형요소    제요소
      - 선택자1 아래 있는 모든 형제 요소를 가리킨다.

    2. 인접형제선택자: +
      - 선택자1 + 선택자2
      -  형요소    인접한 제요소
      - 선택자1 바로 아래 있는 형제 요소를 하나 선택한다.
        (다른 요소로 막혀있으면 선택 안됨)

        p
        div
        p <- ~는 적용 O / +는 적용 X 

        형요소 -> 제요소 로만 적용되고
        제요소 -> 형요소 는 적용 안되는 듯

        */
        
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-4,5,6 의사클래스 */

/* 
  의사 클래스
    - 콜론(:)

    :link - 방문전
    :visited - 방문후
    :hover - 마우스 올린 경우
    :active - 마우스로부터 눌린 경우(눌리고있는중)

    4개의 선택자 함께 사용시
    :link -> :visited -> :hover -> :active 순으로 기록



    child
      - 부모관계 기준 "같은 형제" 선택 (type 구별 X) 
      - {p여도 h1,h2 섞여있으면 순서 구별}
    of type 
      - "같은 형제 중에서" 선택 (type 구별 O) 
      - {p면 p끼리 구분}
    
    :only-child : 자식(child) 요소를 단 하나만 가지는 모든 요소의 자식 선택
    :first-child : 모든 자식 요소 중 첫번째 자식 요소 모두 선택
    :last-child : 모든 자식 요소 중 마지막에 위치하는 자식 요소 모두 선택
    :nth-child(n) : 모든 자식 요소 중 앞에서부터 n번째 위치하는 자식 요소 모두 선택
    :nth-last-child(n) : 모든 자식 요소 중 뒤에서부터 n번째 위치하는 자식 요소 모두 선택

    :only-of-type : 자식 요소를 특정 요소 단 하나만 가지는 모든 요소의 자식 요소 선택
    :first-of-type : 모든 자식 요소 중 첫번째 특정 요소 모두 선택
    :last-of-type : 모든 자식 요소 중 마지막 특정 요소 모두 선택
    :nth-of-type() : 모든 자식 요소 중 n번째 특정 요소 모두 선택
    :nth-last-of-type() : 모든 자식 요소 중 뒤에서 n 번째 특정 요소 모두 선택

    n = 1, 2, 3, 2n-1, 2n, 3n, odd, even
    홀수: 1, 3, 2n-1, odd
    짝수: 2, 4, 2n, even
    수열: 2n = 2, 4, 6, 8..

    ex) 선택자(id,class,요소등):nth-of-type(1) {~~;}
*/

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-7 after before */

/* 
  &lt; = <
  &gt; = >
  &nbsp; = 한칸공백
  &copy; = 저작권 (c) = copyright와 (c)는 중복x = 저작권표기 한번만 써라

  ::before : 시작 태그 바로 뒤 내용 삽입
  ::after : 종료 태그 바로 앞 내용 삽입

  <p>(::before) ABCDEFGPAPAPAPAP (::after)</p>
*/

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-8 */

/* 자식은 부모를 선택 못하고, 제는 형을 선택 못하는 듯 함 */
/* 
  h2 ~ not(p) {color:blue;}
  h2의 모든 형제(제) 중에서 p를 제외하고 blue색으로 바꾼다.
*/


/* 
    :target 
      - 현재 활성화된 target 요소 모두 선택 / 선택자가 타깃되었을 때
      - a태그 #tab1 , p태그 id tab1 ... a태그로 활성화하는 것이 맞는 듯 함~
      - 이걸로 모달 구현 가능할듯
  
    :checked
      - 체크된 상태의 input 요소 모두 선택 / input의 radio 버튼 체크되었을 때
      - 선택자 중에 제->형 자식->부모 선택하는 건 없으니 그쪽은 한계가 있는 듯 함~
      - 형~>제(위에서아래)요소로 모달 구현 가능할듯
  
    :not()
      - () 안에 든 것 제외하고.
*/

/* 
  cursor: 값;
    - 해당 태그 위에 위치하는 마우스 커서 모양 변경
      값
        - auto;
        - default: 기본값; (화살표)
        - pointer: 손가락 모양; (클릭가능버튼)
        - wait: 로딩;
        등등등...
*/

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-9 같은 속성, 같은 속성 값;*/

/* 

<style>
[속성] {color:red;}
[속성="값"] {color:red;}
</style> 

HTML태그에서 같은 속성(예:class), 같은 속성 값(예:class="hello")일 경우, 동시 적용

*/

[class] {color:red;}
[class="en"] [color:red;]
/* class를 가진 태그들, class="en"인 태그들 */

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 02-10 */

/* 

[속성~="값"]: 값(단어)을 포함하는 (en이 온전히 있어야함) (어절 개념) (english X) (en O)
[속성*="값"]: 값을 포함하는 (en이 들어가 있기만 하면 됨) (음절 개념) (english O) (en O)

[속성|="값"]: 값으로 시작하는 (en, en-은 됨) (english는 안됨) (어절개념인듯?)
[속성^="값"]: 값으로 시작하는                                 (음절 개념)

[속성$="값"] 값으로 끝나는

| = 쉬프트 \

*/

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

/* 03-1,2 color, opacity */

/* 

1. 색상 영문 키워드 (영문키워드는 테스트용, HEX로 쓰기)
https://www.w3schools.com/colors/colors_names.asp


2. HEX
  - 16진수 (0~9, A-F)
  - #RRGGBB or #RGB
  - #FF0022 or #F02

3. rgb
- rgb(0,0,0) ~ rgb(255,255,255)

4. rgba (투명도 필요하면 이걸로)
- rgba(0,0,0,0.1) ~ rgba(255,255,255,1)
- a = alpha = 투명도 = 0.0~1.0

5. hsl
- 0~359, 0~100%,   0~100%
-  hue  saturation lightness
- 색상     채도     명도
- hsl(0,0%,0%) ~ hsl(359,100%,100%)

6. hsla
- 색상 채도 명도 alpha
- hsl(100,50%,50%,0.5)

opacity: 불투명도 0~1 (투명~불투명)
alpha: 투명도 0~1 (불투명~투명)

*/

p {
  color: red;
  background-color: hsl(359,30%,60%,0.7);
  border: 3px dashed rgba(255,1,0,0.6);
  outline: 1px dotted rgb(100,100,100);
  opacity: 1;
}